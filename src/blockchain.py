# MODIFIED FOR FEDERATED LEARNING
import hashlib
import json
from time import time
import requests
from urllib.parse import urlparse

class Blockchain:
  def __init__(self, genesis_gradient=None):
      self.current_transactions = []
      self.chain = []
      self.nodes = set()
      self.genesis_gradient = genesis_gradient
    
      # Create the genesis block
      # self.new_global(self.genesis_gradient)
      self.new_block(previous_hash=1, proof=100)

  def new_block(self, proof, previous_hash=None):
      """
      Create a new Block in the Blockchain

      :param proof: The proof given by the Proof of Work algorithm
      :param previous_hash: Hash of previous Block
      :return: New Block
      """
      block = {
          'index': len(self.chain) + 1,
          'timestamp': time(),
          'transactions': self.current_transactions,
          'proof': proof,
          'previous_hash': previous_hash or self.hash(self.chain[-1]),
      }

      # Reset the current list of transactions
      self.current_transactions = []

      self.chain.append(block)
      return block

  # POLYMORPHISM: First one for model updates, second for miner rewards
  def new_global(self, gradients):
      """
      Creates a new transaction to go into the next mined Block

      :param trainer: ID of IoT device conducting local training
      :param gradients: Local gradients of model generated by that IoT device
      :return: The index of the Block that will hold this transaction
      """
      self.current_transactions.append({
        'type': 'global',
        'trainer': 'GLOBAL',
        'gradients': gradients,
      })

      return self.last_block['index'] + 1

  def new_gradients(self, trainer, gradients, d_size):
      """
      Creates a new transaction to go into the next mined Block

      :param trainer: ID of IoT device conducting local training
      :param gradients: Local gradients of model generated by that IoT device
      :return: The index of the Block that will hold this transaction
      """
      self.current_transactions.append({
        'type': 'local',
        'trainer': trainer,
        'gradients': gradients,
        'data-size': d_size,
      })

      return self.last_block['index'] + 1


  def new_transaction(self, sender, recipient, amount):
      """
      Creates a new transaction to go into the next mined Block

      :param sender: Address of the Sender
      :param recipient: Address of the Recipient
      :param amount: Amount
      :return: The index of the Block that will hold this transaction
      """
      self.current_transactions.append({
        'type': 'reward',
        'sender': sender,
        'recipient': recipient,
        'amount': amount,
      })

      return self.last_block['index'] + 1

  @staticmethod
  def hash(block):
      """
      Creates a SHA-256 hash of a Block

      :param block: Block
      """
      block_string = json.dumps(block, sort_keys=True).encode()
      return hashlib.sha256(block_string).hexdigest()

  @property
  def last_block(self):
      """
      Returns the last Block in the chain
      """
      return self.chain[-1]

  def proof_of_work(self, last_block):
    """
    Bitcoin's SHA-256 mining algorithm:
    - Find a number p' such that hash(pp') contains leading 4 zeroes, where p is the previous p'
    - p is the previous proof, and p' is the new proof

    :param last_block: <dict> last Block
    :return: <int>
    """
    last_proof = last_block['proof']
    last_hash = self.hash(last_block)

    proof = 0
    while self.valid_proof(last_proof, proof, last_hash) is False:
        proof += 1

    return proof

  @staticmethod
  def valid_proof(last_proof, proof, last_hash):
    """
    Validates the Proof

    :param last_proof: <int> Previous Proof
    :param proof: <int> Current Proof
    :param last_hash: <str> The hash of the Previous Block
    :return: <bool> True if correct, False if not.
    """
    guess = f'{last_proof}{proof}{last_hash}'.encode()
    guess_hash = hashlib.sha256(guess).hexdigest()
    return guess_hash[:4] == "0000"

  def valid_chain(self, chain):
      """
      Determine if a given blockchain is valid

      :param chain: <list> A blockchain
      :return: <bool> True if valid, False if not
      """
      last_block = chain[0]
      current_index = 1

      while current_index < len(chain):
          block = chain[current_index]
          print(f'{last_block}')
          print(f'{block}')
          print("\n-----------\n")
          # Check that the hash of the block is correct
          if block['previous_hash'] != self.hash(last_block):
              return False

          # Check that the Proof of Work is correct
          if not self.valid_proof(last_block['proof'], block['proof'], self.hash(last_block)):
              return False

          last_block = block
          current_index += 1

      return True

  def resolve_conflicts(self):
      """
      This is our consensus algorithm, it resolves conflicts
      by replacing our chain with the longest one in the network.

      :return: <bool> True if our chain was replaced, False if not
      """
      neighbours = self.nodes
      new_chain = None

      # We're only looking for chains longer than ours
      max_length = len(self.chain)

      # Grab and verify the chains from all the nodes in our network
      for node in neighbours:
          response = requests.get(f'http://{node}/chain')

          if response.status_code == 200:
              length = response.json()['length']
              chain = response.json()['chain']

              # Check if the length is longer and the chain is valid
              if length > max_length and self.valid_chain(chain):
                  max_length = length
                  new_chain = chain

      # Replace our chain if we discovered a new, valid chain longer than ours
      if new_chain:
          self.chain = new_chain
          return True

      return False

  def register_node(self,address):
    if address[:4] != "http":
        address = "http://"+address
    parsed_url = urlparse(address)
    self.nodes.add(parsed_url.netloc)
    print("Registered node",address)
